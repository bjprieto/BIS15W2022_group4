flying_vec
bird_vec <- homerange %>%
filter(taxon == "birds")%>%
pull(common.name)
fly_or_bird_list <- list(flying_vec, bird_vec)
ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"))
homerange%>%
filter(taxon == "birds")%>%
filter(locomotion != "flying")%>%
select(common.name)
homerange%>%
filter(taxon == "birds")%>%
filter(locomotion != "walking")%>%
select(common.name)
homerange%>%
filter(locomotion == "flying")%>%
filter(taxa != "bird")%>%
select(common.name)
homerange%>%
filter(locomotion == "flying")%>%
filter(taxon != "birds")%>%
select(common.name)
herbivore_vec <- homerange %>%
filter(trophic.guild == "herbivore")%>%
pull(common.name)
fly_bird_herbi_list <- list(flying_vec, bird_vec, herbivore_vec)
ggVennDiagram(fly_bird_herbi_list, category.names = c("Fly", "Bird", "Herbivore"))
# you can toggle edge size
venn_plot <- ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"), edge_size = 1.5)
venn_plot +
scale_fill_distiller(palette = "Greys")+ #distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly")
)
# you can toggle edge size and label (Fly, Bird) colors here
ggVennDiagram(fly_or_bird_list,
set_color = c("black", "blue"),             # sets label colors
category.names = c("Fly", "Bird"),          # sets category label names
label_color = "firebrick",                  # sets overlap-quantity label color
label_size = 4                              # sets overlap-label size
)+
scale_color_brewer(palette = "Set3")+                   # sets palette for circle colors
scale_fill_distiller(palette = "Greys")+                # distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly") )
#Set Up the vectors:
#you can also recycle the one we made earlier
swimming_vec<- homerange %>%
filter(locomotion=="swimming")%>%
pull(common.name)
carni_vec<- homerange %>%
filter(trophic.guild=="carnivore")%>%
pull(common.name)
aqua_vec <- homerange %>%
filter(realm == "aquatic")%>%
pull(common.name)
ecto_vec<- homerange %>%
filter(thermoregulation =="ectotherm")%>%
pull(common.name)
practice_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
ggVennDiagram(practice_list, category.names = c("swim", "carnivore", "aquatic", "ectotherm"))
hr_taxon_count <- homerange %>%
count(taxon)
hr_taxon_count
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
practice_count <- homerange %>%
count(reptilia)
practice_count <- homerange %>%
filter(class=="reptilia")%>%
count(family)
practice_count
practice_count %>%
ggplot(aes(
label = reptilia,
size = n,
color = reptilia
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
practice_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
practice_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 30) +
theme_minimal()
practice_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15) +
theme_minimal()
practice_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 10) +
theme_minimal()
practice_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 12) +
theme_minimal()
practice_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 13) +
theme_minimal()
practice_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 14) +
theme_minimal()
library(tidyverse)
library(janitor)
library("palmerpenguins")
#install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
options(scipen=999) #cancels the use of scientific notation for the session
superhero_info <- readr::read_csv("data/heroes_information.csv", na = c("", "-99", "-"))
superhero_powers <- readr::read_csv("data/super_hero_powers.csv", na = c("", "-99", "-"))
beachbugs_long <- readr::read_csv("data/beachbugs_long.csv")
clean_names(superhero_info)
clean_names(superhero_info)
glimpse(superhero_info)
anyNA(superhero_info)
superhero_info_cleanclean_names(superhero_info)
superhero_info_clean <-clean_names(superhero_info)
superhero_info_clean <-clean_names(superhero_info)
names(superhero_info_clean)
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = weight)) +
geom_boxplot()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .3, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .7, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .5, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .8, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE)
superhero_info_clean %>%
ggplot(aes(x = alignment, y = weight, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE)+ coord_flip()
superhero_info_clean %>%
ggplot(aes(x = gender, y = height, fill = gender)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = alignment, y = height, fill = alignment)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
superhero_info_clean %>%
ggplot(aes(x = gender, y = height, fill = gender)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
glimpse(beachbugs_long)
glimpse(beachbugs_long)
names(beachbugs_long)
names(beachbugs_long)
heartrate_long %>%
ggplot(aes(year, site, fill= buglevels)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")+coord_flip()
beachbugs_long %>%
ggplot(aes(year, site, fill= buglevels)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")+coord_flip()
beachbugs_long %>%
ggplot(aes(year, site, fill= buglevels)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")
#makes a new column of the highest buglevel observed at each site
beachbugs_w_max <- beachbugs_long %>%
group_by(site) %>%
mutate(max_buglevel = max(buglevels, na.rm=T)) %>%
arrange(site)
beachbugs_w_max
#makes a new table where the buglevels are normalized to the max_buglevel
beachbugs_normalized <- beachbugs_w_max %>%
group_by(site) %>%
mutate(norm_buglevel = buglevels/max_buglevel) %>%
arrange(site,year) %>%
select(site, year, norm_buglevel)   # you dont have to select(), but I think its a clearer looking table
beachbugs_normalized
beachbugs_normalized %>%
ggplot(aes(site, year, fill= norm_buglevel)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")
beachbugs_normalized %>%
ggplot(aes(site, year, fill= norm_buglevel)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")+coord_flip()
# evil
#evil_vec <- superhero_info %>%
#  filter(alignment == "bad")%>%
#  pull(name)
evil_vec <- superhero_info_clean%>%
filter(alignment=="bad")%>%
pull(name)
# red eyes
red_eyes_vec <- superhero_info_clean%>%
filter(eye_color=="bad")%>%
pull(name)
# male
gender_vec <- superhero_info_clean%>%
filter(gender=="male")%>%
pull(name)
# bald
hair_vec <- superhero_info_clean%>%
filter(hair_color=="bald")%>%
pull(name)
# evil
#evil_vec <- superhero_info %>%
#  filter(alignment == "bad")%>%
#  pull(name)
evil_vec <- superhero_info_clean%>%
filter(Alignment=="bad")%>%
pull(name)
# evil
#evil_vec <- superhero_info %>%
#  filter(alignment == "bad")%>%
#  pull(name)
evil_vec <- superhero_info_clean%>%
filter(alignment=="bad")%>%
pull(name)
# red eyes
red_eyes_vec <- superhero_info_clean%>%
filter(eye_color=="red")%>%
pull(name)
# male
gender_vec <- superhero_info_clean%>%
filter(gender=="male")%>%
pull(name)
# bald
hair_vec <- superhero_info_clean%>%
filter(hair_color=="bald")%>%
pull(name)
# evil
#evil_vec <- superhero_info %>%
#filter(alignment == "bad")%>%
#pull(name)
evil_vec <- superhero_info_clean%>%
filter(alignment=="bad")%>%
pull(name)
# red eyes
red_eyes_vec <- superhero_info_clean%>%
filter(eye_color=="red")%>%
pull(name)
# male
gender_vec <- superhero_info_clean%>%
filter(gender=="male")%>%
pull(name)
# bald
hair_vec <- superhero_info_clean%>%
filter(hair_color=="bald")%>%
pull(name)
# evil
#evil_vec <- superhero_info %>%
#filter(alignment == "bad")%>%
#pull(name)
evil_vec <- superhero_info_clean%>%
filter(alignment=="bad")%>%
pull(name)
# red eyes
red_eyes_vec <- superhero_info_clean%>%
filter(eye_color=="red")%>%
pull(name)
# male
gender_vec <- superhero_info_clean%>%
filter(gender=="Male")%>%
pull(name)
# bald
hair_vec <- superhero_info_clean%>%
filter(hair_color=="No Hair")%>%
pull(name)
# questions_list <- list(evil_vec, red_eye_vec, male_vec, bald_vec)
superhero_list <- list(evil_vec, red_eyes_vec, gender_vec, hair_vec)
# something like:
# ggVennDiagram( list, category.names = c("name", "name", "name", "name"))
superhero_list <- list(evil_vec, red_eyes_vec, gender_vec, hair_vec)
ggVennDiagram(superhero_list, category.names = c("Evil", "Red Eyes", "Male", "Bald"))
superhero_info_clean%>%
filter(eye_color == "red")%>%
filter(alignment != "good")%>%
select(common.name)
superhero_info_clean%>%
filter(eye_color=="red" & gender=="Male")
blue_eyes_vec <- superhero_info_clean%>%
filter(eye_color=="green")%>%
pull(name)
female_vec <- superhero_info_clean%>%
filter(gender=="Female")%>%
pull(name)
hcolor_vec <- superhero_info_clean%>%
filter(hair_color=="Black")%>%
pull(name)
superhero_list2 <- list(blue_eyes_vec, female_vec, hcolor_vec)
superhero_list2 <- list(blue_eyes_vec, female_vec, hcolor_vec)
ggVennDiagram(superhero_list, category.names = c("Blue Eyes", "Female", "Black"))
blue_eyes_vec <- superhero_info_clean%>%
filter(eye_color=="green")%>%
pull(name)
female_vec <- superhero_info_clean%>%
filter(gender=="Female")%>%
pull(name)
hcolor_vec <- superhero_info_clean%>%
filter(hair_color=="Black")%>%
pull(name)
good <- superhero_info_clean%>%
filter(alignment=="good")%>%
pull(name)
superhero_list2 <- list(blue_eyes_vec, female_vec, hcolor_vec, good)
superhero_list2 <- list(blue_eyes_vec, female_vec, hcolor_vec, good)
ggVennDiagram(superhero_list, category.names = c("Blue Eyes", "Female", "Black"))
superhero_list2 <- list(blue_eyes_vec, female_vec, hcolor_vec, good)
ggVennDiagram(superhero_list, category.names = c("Blue Eyes", "Female", "Black", "good"))
head(superhero_powers)
power_frequency <- superhero_powers %>%
select(-hero_names) %>%
summarise_all(~(sum(.))) %>%
pivot_longer(everything(), names_to = "power", values_to = "freq")
power_frequency
power_frequency %>%
ggplot(aes(
label = power,
size = n,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
power_frequency %>%
ggplot(aes(
label = power,
size = n,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
power_frequency %>%
ggplot(aes(
label = power,
size = freq,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
power_frequency %>%
ggplot(aes(
label = power,
size = freq,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 5) +
theme_minimal()
power_frequency %>%
ggplot(aes(
label = power,
size = freq,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 8) +
theme_minimal()
power_frequency %>%
ggplot(aes(
label = power,
size = freq,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 6) +
theme_minimal()
power_quantity <- superhero_powers %>%
pivot_longer(-hero_names, names_to = "power", values_to = "yes_or_no") %>%
group_by(hero_names) %>%
mutate(sum_powers = sum(yes_or_no, na.rm=T)) %>%
arrange(desc(sum_powers), hero_names, desc(yes_or_no))
power_quantity
#we have to trim down to only the top 50, or it will crowd the image!
power_quantity <- power_quantity %>%
ungroup %>%
distinct(hero_names, sum_powers) %>%
slice_max(sum_powers, n = 50)
power_quantity
power_frequency %>%
ggplot(aes(
label = hero_names,
size = sum_powers,
color = hero_names
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 6) +
theme_minimal()
power_quantity <- superhero_powers %>%
pivot_longer(-hero_names, names_to = "power", values_to = "yes_or_no") %>%
group_by(hero_names) %>%
mutate(sum_powers = sum(yes_or_no, na.rm=T)) %>%
arrange(desc(sum_powers), hero_names, desc(yes_or_no))
power_quantity
#we have to trim down to only the top 50, or it will crowd the image!
power_quantity <- power_quantity %>%
ungroup %>%
distinct(hero_names, sum_powers) %>%
slice_max(sum_powers, n = 50)
power_quantity
power_quantity %>%
ggplot(aes(
label = hero_names,
size = sum_powers,
color = hero_names
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 6) +
theme_minimal()
power_quantity %>%
ggplot(aes(
label = hero_names,
size = sum_powers,
color = hero_names
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 4) +
theme_minimal()
